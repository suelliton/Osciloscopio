/********************************************************
 * Arduino PID Tuning Front-End,  Version 0.3
 * by Brett Beauregard
 * License: Creative-Commons Attribution Share-Alike
 * April 2011
 *
 * This application is designed to interface with an
 * arduino running the PID Library.  From this Control
 * Panel you can observe & adjust PID performance in
 * real time
 *
 * The ControlP5 library is required to run this sketch.
 * files and install instructions can be found at
 * http://www.sojamo.de/libraries/controlP5/
 *
 ********************************************************/

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import processing.serial.*;
import controlP5.*;

/***********************************************
 * User spcification section
 **********************************************/
 // define a largura e altura da janela de dentro osciloscopio
int windowWidth = 1200;
int windowHeight = 800;
// é utilizado na funcao Position() para guardar o valor anterior setado pelo knoob
float xAnterior = 0, valorPosition = 0;//valor position é o valor atual da posição 
// define o numero minimo da escala vertical de forma global e só pode ser alterada atraves do field minimoY e maximoY
float ScaleMinGlobal = 0;
float ScaleMaxGlobal = 1024;
// guarda o numero minimo em tempo de execucao é utilizado pela funcao zoom pra modificar a escala em tempo real
float InScaleMin = ScaleMinGlobal;
float InScaleMax = ScaleMaxGlobal;
// variaveis booleanas de controle de funcoes em tempo real
boolean pause = false; // serve pra parar execução do programa, usado na funcao draw() que desenha a tela setado na funcao pause
boolean movimentarGrid = false;// serve para controlar se a grid vai se mover ou não usado pelo toogle button grid setado na funcao grid
//se refere a quantos Microssegundos terá cada quadrado da grid
int windowSpan = 20000;    // number of mS into the past you want to display 300000 = 0.3 segundos , windowSpan= 20000 e o refreshRate = 100 formam 1 quadro por segundo  
//10000 = 0.5 seg, 5000 = 0.250 seg, 
//Velocidade de refesh(redesenho) da tela
int refreshRate = 100;      // how often you want the graph to be reDrawn;

//essa parte nao mudei nada
float displayFactor = 1; //display Time as Milliseconds
//float displayFactor = 1000; //display Time as Seconds
//float displayFactor = 60000; //display Time as Minutes
//acredito ser a variavelque guarda o nome do arquivo que iremos salvar
String outputFileName = ""; // if you'd like to output data to  a file, specify the path here
/***********************************************
 * end user spec
 **********************************************/
 //nao mexi nessa parte
int nextRefresh;
int arrayLength = windowSpan / refreshRate+1;
int[] InputData = new int[arrayLength];     //we might not need them this big, but

float inputTop = 25;
float inputHeight = (windowHeight-70)*2/3;
float outputTop = inputHeight+50;
float outputHeight = (windowHeight-70)*1/3;

float ioLeft = 150, ioWidth = windowWidth-ioLeft-50;
float ioRight = ioLeft+ioWidth;
float pointWidth= (ioWidth)/float(arrayLength-1);
//se refere a quantidade de linhas verticais terana tela
int vertCount = 20;

int nPoints = 0;

float Input, Setpoint, Output,Quadro;
float[] INPUTS = new float[6];
int[][] LINHAS = new int[6][arrayLength]; 
boolean[] ShowLine = new boolean[6]; 
boolean A0 = false;
boolean A1 = false;
boolean A2 = false;
boolean A3 = false;
boolean A4 = false;
boolean A5 = false;

boolean madeContact =false;
boolean justSent = true;
// declara os elementos de GUI
Serial myPort;
ControlP5 controlP5;
controlP5.Button SetButton, PauseButton, PositionIncrement, PositionDecrement;
controlP5.Toggle ToggleGrid, ToggleA0,ToggleA1,ToggleA2,ToggleA3,ToggleA4,ToggleA5;
controlP5.Textlabel escala, position, InLabelA0,InLabelA1,InLabelA2,InLabelA3,InLabelA4,InLabelA5,QuadroLabel;
controlP5.Textfield MinimoY, MaximoY,InField;
controlP5.Slider slider;
controlP5.Knob Knob_time, Knob_zoom;
PrintWriter output;
PFont AxisFont, TitleFont;

void setup(){
        frameRate(10);
        size(1200 , 550); //define tamanho da janela principal
        println(Serial.list()); //printa lista de portas conectadas
        myPort = new Serial(this, Serial.list()[0], 9600);     //  inicia umanova conexao
        myPort.bufferUntil(10);                                //define buffer
        //  Inicializa a classe responsavel pelacriacao de GUI
        controlP5 = new ControlP5(this);
        //cria os elementos de GUI
        escala = controlP5.addTextlabel("label_escala","Escala",10,5);
        MinimoY = controlP5.addTextfield("Min",10,20,50,20);           //   Text Fields we'll be
        MaximoY = controlP5.addTextfield("Max",85,20,50,20);
        SetButton = controlP5.addButton("Set_scale",0.0,85,55,50,20);      //#1c3861
        ToggleA0 = controlP5.addToggle("A0").setPosition(10,200).setSize(50,20).setValue(false).setMode(ControlP5.SWITCH);
        ToggleA1 = controlP5.addToggle("A1").setPosition(10,235).setSize(50,20).setValue(true).setMode(ControlP5.SWITCH);
        ToggleA2 = controlP5.addToggle("A2").setPosition(10,270).setSize(50,20).setValue(true).setMode(ControlP5.SWITCH);
        ToggleA3 = controlP5.addToggle("A3").setPosition(10,305).setSize(50,20).setValue(true).setMode(ControlP5.SWITCH);
        ToggleA4 = controlP5.addToggle("A4").setPosition(10,340).setSize(50,20).setValue(true).setMode(ControlP5.SWITCH);
        ToggleA5 = controlP5.addToggle("A5").setPosition(10,375).setSize(50,20).setValue(true).setMode(ControlP5.SWITCH);
        
        InLabelA0 = controlP5.addTextlabel("In","1",40,200);  
        InLabelA1 = controlP5.addTextlabel("In2","1",10,345);
        InLabelA2 = controlP5.addTextlabel("In3","1",10,345);
        InLabelA3 = controlP5.addTextlabel("In4","1",10,345);
        InLabelA4 = controlP5.addTextlabel("In5","1",10,345);
        InLabelA5 = controlP5.addTextlabel("In6","1",10,345);
        
        QuadroLabel =controlP5.addTextlabel("Quadro","Quadro: "+(windowSpan*1000)/20000 + "ms",10,355); 
        
        Knob_zoom = controlP5.addKnob("Zoom").setRange(0,100).setValue(0).setPosition(10,100).setRadius(35).setDragDirection(Knob.HORIZONTAL);
         /*botões para incrementar e decrementar os valores do position*/
        PositionIncrement = controlP5.addButton("Increment")
                                     .setValue(22)//valor que será incrementado em valorPosition sempre que o botão for pressionado 
                                     .setImage(loadImage("ic_cima3.png"))//imagem que está na pasta do arquivo PDI_frontend_v03
                                     .setPosition(100,105)//posições x and y
                                     .setSize(30,30);//largura e altura
        PositionDecrement = controlP5.addButton("Decrement")
                                     .setValue(22)
                                     .setImage(loadImage("ic_baixo3.png"))
                                     .setPosition(100,140)
                                     .setSize(30,30);
        position = controlP5.addTextlabel("a","POSITION",90,175);
        
        
        PauseButton = controlP5.addButton("Pause",0.0,45,475,60,20);      //
        
        
        //esse slider é a barra deslizante
         //slider = controlP5.addSlider("slider").setRange(100,10000).setValue(10000).setPosition(10,250).setSize(90,20);
        Knob_time = controlP5.addKnob("Time").setRange(20000,10).setValue(20000).setPosition(25,400).setRadius(35).setDragDirection(Knob.VERTICAL);
       
        ToggleGrid = controlP5.addToggle("Mover_grid").setPosition(48,500).setSize(50,20).setValue(true);

       

        AxisFont = loadFont("axis.vlw");
        TitleFont = loadFont("Titles.vlw");
        nextRefresh=millis();
        if (outputFileName!="") output = createWriter(outputFileName);
}


void Increment() {
  if (valorPosition < ScaleMaxGlobal) {//se está dentro do limite pode receber
      valorPosition += PositionIncrement.getValue();//incrimenta 22 "setValue(22)" no valor da posição
      if (valorPosition > ScaleMaxGlobal) {
        valorPosition = ScaleMaxGlobal;//se estorou o limite, reseta para 1024 pafa ficar dentro do limite
      }
      println(valorPosition);
      changePosition();
  } else {
    println("limite máximo atingido");
  }
  
}

//decrementa o valor da variável valorPositio sempre que o PositionDecrement for pressionado 
void Decrement (){

  
  if (valorPosition > ScaleMinGlobal) {//se está dentro do limite pode receber
      valorPosition -= PositionDecrement.getValue();//decrementa 22 no valor da posição
      if (valorPosition < ScaleMinGlobal){
        valorPosition = ScaleMinGlobal; //recebe 0 que é o limite mínimo
      }
      println(valorPosition);
      changePosition();
  } else {
    println("limite mínimo atingido");
  }
  
}

void changePosition(){
        float x = 0;//valor a ser adicionado ou subtraido no limite superior ou inferior da escala para dar efeito de deslizar   
        if(valorPosition < xAnterior){//se a leitura atual for um numero menor que o lido anteriormente
          x = -10;
        }else if(valorPosition > xAnterior){//se a leitura atual for um numero menor que o lido anteriormente
          x = 10;
        }
        println("valor de x: "+x);
        //aqui testa se asmodificacoes no espaço da janela obedecem os limites globais setados se sim executa o deslize casocontrario nao faz nada
        if((InScaleMin + x) >= ScaleMinGlobal && (InScaleMax + x) <= ScaleMaxGlobal ){
          InScaleMin = InScaleMin + x; //aqui esta somando mais nao necessariamente com um numero positivo mas tbm com negativo
          InScaleMax = InScaleMax + x;//ou seja uma subtracao de acordo com o que foi setado no bloco acima
          println("dentro do intervalo");
        }
        xAnterior = valorPosition;//guarda o valor lido atualmente
}

//toggle para pausar a execucao do redesenho do programa, usa a variavel pause na funcao draw()
void Pause(){
        if(!pause){
          pause = true;
        }else{
          pause = false;
        }
}
//toggle para parar a movimentacao só da gridline, usado na funcao drawGraph()
void Mover_grid(){
       if(!movimentarGrid){
          movimentarGrid = true;
        }else{
          movimentarGrid = false;
        }
}
//Knob, faz calculo de percentagem do valor lido com relacao ao valor de tamanho de tela globalscale
//e acrescenta este valor na escala minima e subtrai da maxima, pra dar o efeito de zoom
void Zoom(){
        float x1 = (ScaleMinGlobal*Knob_zoom.getValue())/100;//é calculado o zoom em porcentagem em cima do valor setado no globalscale
        float x2 = (ScaleMaxGlobal*Knob_zoom.getValue())/100;
        InScaleMin = ScaleMinGlobal + x1;
        InScaleMax = ScaleMaxGlobal - x2;
}

//Button, salva as configuraçoes colocadas nos fields minimoY e maximoY
void Set_scale(){
        ScaleMinGlobal = Float.parseFloat( MinimoY.getValueLabel().getText());
        ScaleMaxGlobal = Float.parseFloat( MaximoY.getValueLabel().getText());
        //reatribui as novas confiruraçoes de escala globais para as configuraçoes ajustaveis
        InScaleMin = ScaleMinGlobal;
        InScaleMax = ScaleMaxGlobal;
}
//Knob, modifica a variavel windowSpan que se refere a quantos Microssegundos por quadrado definindo a velocidade da execucao
// e recalcula todas as variaveis que dependem desse parametro
void Time(){
        windowSpan = (int) Knob_time.getValue();      
        Quadro = (windowSpan*1000)/20000;
        if(Quadro >=100){
            refreshRate = 100; 
        }else if(Quadro > 50 && Quadro < 100 ){
          refreshRate = 50;  
        }else if(Quadro <= 50 && Quadro > 25){
          refreshRate = 25;  
        }else if(Quadro <= 25 && Quadro > 0 ){
          refreshRate = 5;  
        }
        
        arrayLength = windowSpan / refreshRate+1;
        InputData = new int[arrayLength];     //we might not need them this big, but
        inputHeight = (windowHeight-70)*2/3;
        outputTop = inputHeight+50;
        outputHeight = (windowHeight-70)*1/3;
        ioLeft = 150;
        ioWidth = windowWidth-ioLeft-50;
        ioRight = ioLeft+ioWidth;
        nPoints = 0;
        pointWidth= (ioWidth)/float(arrayLength-1);
        
        //20000 - 100
        //winspan - x
        //20000x = winspan
        //x = winspan/20000
        
        
        QuadroLabel.setValue("Quadro: "+Quadro + "ms");
        
}
//loop principal que desenha todas as funcoes
void draw(){
       ShowLine[0] = !A0;
       ShowLine[1] = !A1;
       ShowLine[2] = !A2;
       ShowLine[3] = !A3;
       ShowLine[4] = !A4;
       ShowLine[5] = !A5;
       
      if(pause){//se pausar ele nao desenha nada e fica o ultimo desenho parado

      }else{
      background(200);
      drawGraph();
      drawButtonArea();
      }
}
//desenha o grafico
void drawGraph(){
          
    
         
      //draw Base, gridlines
      stroke(0);
      fill(230);
      rect(ioLeft, inputTop,ioWidth-1 , inputHeight);
      //rect(ioLeft, outputTop, ioWidth-1, outputHeight);
      stroke(100);
      //Section Titles
      textFont(TitleFont);
      fill(255);
      text("Osciloscópio",(int)ioLeft+10,(int)inputTop-5);
      //GridLines and Titles
      textFont(AxisFont);
      //horizontal grid lines
      int interval = (int)inputHeight/10;
      for(int i=0;i<11;i++)  {
        if(i>0&&i<10) line(ioLeft+1,inputTop+i*interval,ioRight-2,inputTop+i*interval);
        text(str((InScaleMax-InScaleMin)/10*(float)(10-i)+InScaleMin),ioRight+10,inputTop+i*interval+9);
      }
      //vertical grid lines and TimeStamps
      int elapsedTime = millis();
      interval = (int)ioWidth/vertCount;
      int shift = elapsedTime*(int)ioWidth / windowSpan;
      shift %=interval;

      int iTimeInterval = windowSpan/vertCount;
      float firstDisplay = (float)(iTimeInterval*(elapsedTime/iTimeInterval))/displayFactor;
      float timeInterval = (float)(iTimeInterval)/displayFactor;
      for(int i=0;i<vertCount;i++){
        int x = (int)ioRight-shift-2-i*interval;
        //aqui controlo se vou desenhar linhas verticais dinamicas ou estaticas
      if(!movimentarGrid){
         for(int j=0;j<25;j++){//estaticas
            line(50*j,inputTop+1,50*j,inputTop+inputHeight-1);
         }
      }else{//dinamicas
          line(x,inputTop+1,x,inputTop+inputHeight-1);
      }

        float t = firstDisplay-(float)i*timeInterval;
        if(t>=0)  text(str(t),x,outputTop+outputHeight+10);
      }
      // add the latest data to the data Arrays.  the values need
      // to be massaged to get them to graph correctly.  they
      // need to be scaled to fit where they're going, and
      // because 0, 0 is the top left, we need to flip the values.
      // this is easier than having the user stand on their head
      // to read the graph.
    
  
      if(millis() > nextRefresh && madeContact){
              nextRefresh += refreshRate;
              
              for(int i=nPoints-1;i>0;i--){
               // InputData[i]=InputData[i-1];
                      for(int g = 0 ;g < 6; g++){
                           LINHAS[g][i] = LINHAS[g][i-1] ;          
                   }
              }
              if (nPoints < arrayLength) nPoints++;    
              for(int g = 0 ;g < 6; g++){
                   LINHAS[g][0] = int(inputHeight)-int(inputHeight*(INPUTS[g]-InScaleMin)/(InScaleMax-InScaleMin)); 
              }
        }
      //draw lines for the input, setpoint, and output
      strokeWeight(2);
      
      for(int k=0; k<6; k++)  {//para cada linha
                  
                  if(!ShowLine[k]){  
                    continue;
                  }
                  switch(k){//muda a cor de acordo com a linha
                    case 0:  stroke(255,0,0);
                    break;
                    case 1:  stroke(0,255,0);
                    break;
                    case 2:  stroke(0,0,255);
                    break;
                    case 3:  stroke(255,255,0);
                    break;
                    case 4:  stroke(0,255,255);
                    break;
                    case 5:  stroke(255,0,255);
                    break;
                  } strokeWeight(2);
      
                for(int i=0; i<nPoints-2; i++)  {
                  int X1 = int(ioRight-2-float(i)*pointWidth);
                  int X2 = int(ioRight-2-float(i+1)*pointWidth);
                  boolean y1Above, y1Below, y2Above, y2Below;
                    
          
                  //DRAW THE INPUT
                  boolean drawLine=true;
                 // stroke(255,0,0);
                  int Y1 = LINHAS[k][i];
                  int Y2 = LINHAS[k][i+1];
          
                  y1Above = (Y1>inputHeight);                     // if both points are outside
                  y1Below = (Y1<0);                               // the min or max, don't draw the
                  y2Above = (Y2>inputHeight);                     // line.  if only one point is
                  y2Below = (Y2<0);                               // outside constrain it to the limit,
                  if(y1Above){
                    if(y2Above) drawLine=false;                   //
                    else if(y2Below) {                            //
                      Y1 = (int)inputHeight;                      //
                      Y2 = 0;                                     //
                    }else Y1 = (int)inputHeight;                   //
                  }else if(y1Below){                                //
                    if(y2Below) drawLine=false;                   //
                    else if(y2Above) {                            //
                      Y1 = 0;                                     //
                      Y2 = (int)inputHeight;                      //
                    }else Y1 = 0;                                  //
                  }else{                                               //
                    if(y2Below) Y2 = 0;                           //
                    else if(y2Above) Y2 = (int)inputHeight;       //
                  }                                               //
          
                  if(drawLine){
                    line(X1,Y1+inputTop, X2, Y2+inputTop);
                  }
                }
                
                strokeWeight(1);
        }
      
      
}

void drawButtonArea(){
  stroke(0);
  fill(100);
  rect(0, 0, ioLeft, windowHeight);
}

byte[] floatArrayToByteArray(float[] input){
  int len = 4*input.length;
  int index=0;
  byte[] b = new byte[4];
  byte[] out = new byte[len];
  ByteBuffer buf = ByteBuffer.wrap(b);
  for(int i=0;i<input.length;i++)
  {
    buf.position(0);
    buf.putFloat(input[i]);
    for(int j=0;j<4;j++) out[j+i*4]=b[3-j];
  }
  return out;
}


//take the string the arduino sends us and parse it
void serialEvent(Serial myPort)
{
  String read = myPort.readStringUntil(10);
  if(outputFileName!="") output.print(str(millis())+ " "+read);
  String[] s = split(read, " ");
  //println(s.length);
  if (s.length ==8){
    //Setpoint = float(s[1]);           // * pull the information
    for(int i = 0 ;i < 6 ; i++){
      if(i == 0){
      INPUTS[i] = float(s[i]);     
      } else{        //   we need out of the
      INPUTS[i] = 200*i;
    }}
   // println(INPUTS);
    //Output = float(s[3]);             //   string and put it
    //SPLabel.setValue(s[1]);           //   where it's needed
    InLabelA0.setValue(float(s[0]));           //
    //OutLabel.setValue(trim(s[3]));    //
    //PLabel.setValue(trim(s[4]));      //
    //ILabel.setValue(trim(s[5]));      //
    //DLabel.setValue(trim(s[6]));      //
    //AMCurrent.setValue(trim(s[7]));   //
    //DRCurrent.setValue(trim(s[8]));
    if(justSent){                    // * if this is the first read
                                     //   since we sent values to
     // SPField.setText(trim(s[1]));    //   the arduino,  take the
      //InField.setText(trim(s[2]));    //   current values and put
      //OutField.setText(trim(s[3]));   //   them into the input fields
      //PField.setText(trim(s[4]));     //
      //IField.setText(trim(s[5]));     //
      //DField.setText(trim(s[6]));     //
     // mode = trim(s[7]);              //
      //AMLabel.setValue(trim(s[7]));         //
      //dr = trim(s[8]);                //
      //DRCurrent.setValue(trim(s[8]));         //
      justSent=false;                 //
    }                                 //

    if(!madeContact) madeContact=true;
  }
}
